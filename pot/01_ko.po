#. extracted from en/01-introduction/01-chapter1.markdown
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-01-02 21:08+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.9.0\n"

#: en/01-introduction/01-chapter1.markdown:1
msgid "# Getting Started #"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:3
msgid ""
"This chapter will be about getting started with Git.  We will begin at the "
"beginning by explaining some background on version control tools, then move "
"on to how to get Git running on your system and finally how to get it setup "
"to start working with.  At the end of this chapter you should understand why "
"Git is around, why you should use it and you should be all setup to do so."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:5
msgid "## About Version Control ##"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:7
msgid ""
"What is version control, and why should you care? Version control is a "
"system that records changes to a file or set of files over time so that you "
"can recall specific versions later. Even though the examples in this book "
"show software source code as the files under version control, in reality any "
"type of file on a computer can be placed under version control."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:9
msgid ""
"If you are a graphic or web designer and want to keep every version of an "
"image or layout (which you certainly would), it is very wise to use a "
"Version Control System (VCS). A VCS allows you to: revert files back to a "
"previous state, revert the entire project back to a previous state, compare "
"changes over time, see who last modified something that might be causing a "
"problem, who introduced an issue and when, and more. Using a VCS also means "
"that if you screw things up or lose files, you can generally recover easily. "
"In addition, you get all this for very little overhead."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:11
msgid "### Local Version Control Systems ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:13
msgid ""
"Many people’s version-control method of choice is to copy files into another "
"directory (perhaps a time-stamped directory, if they’re clever). This "
"approach is very common because it is so simple, but it is also incredibly "
"error prone. It is easy to forget which directory you’re in and accidentally "
"write to the wrong file or copy over files you don’t mean to."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:15
msgid ""
"To deal with this issue, programmers long ago developed local VCSs that had "
"a simple database that kept all the changes to files under revision control "
"(see Figure 1-1)."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:17
msgid ""
"Insert 18333fig0101.png \n"
"Figure 1-1. Local version control diagram."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:20
msgid ""
"One of the more popular VCS tools was a system called rcs, which is still "
"distributed with many computers today. Even the popular Mac OS X operating "
"system includes the rcs command when you install the Developer Tools. This "
"tool basically works by keeping patch sets (that is, the differences between "
"files) from one change to another in a special format on disk; it can then "
"re-create what any file looked like at any point in time by adding up all "
"the patches."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:22
msgid "### Centralized Version Control Systems ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:24
msgid ""
"The next major issue that people encounter is that they need to collaborate "
"with developers on other systems. To deal with this problem, Centralized "
"Version Control Systems (CVCSs) were developed. These systems, such as CVS, "
"Subversion, and Perforce, have a single server that contains all the "
"versioned files, and a number of clients that check out files from that "
"central place. For many years, this has been the standard for version "
"control (see Figure 1-2)."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:26
msgid ""
"Insert 18333fig0102.png \n"
"Figure 1-2. Centralized version control diagram."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:29
msgid ""
"This setup offers many advantages, especially over local VCSs. For example, "
"everyone knows to a certain degree what everyone else on the project is "
"doing. Administrators have fine-grained control over who can do what; and "
"it’s far easier to administer a CVCS than it is to deal with local databases "
"on every client."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:31
msgid ""
"However, this setup also has some serious downsides. The most obvious is the "
"single point of failure that the centralized server represents. If that "
"server goes down for an hour, then during that hour nobody can collaborate "
"at all or save versioned changes to anything they’re working on. If the hard "
"disk the central database is on becomes corrupted, and proper backups "
"haven’t been kept, you lose absolutely everything—the entire history of the "
"project except whatever single snapshots people happen to have on their "
"local machines. Local VCS systems suffer from this same problem—whenever you "
"have the entire history of the project in a single place, you risk losing "
"everything."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:33
msgid "### Distributed Version Control Systems ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:35
msgid ""
"This is where Distributed Version Control Systems (DVCSs) step in. In a DVCS "
"(such as Git, Mercurial, Bazaar or Darcs), clients don’t just check out the "
"latest snapshot of the files: they fully mirror the repository. Thus if any "
"server dies, and these systems were collaborating via it, any of the client "
"repositories can be copied back up to the server to restore it. Every "
"checkout is really a full backup of all the data (see Figure 1-3)."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:37
msgid ""
"Insert 18333fig0103.png \n"
"Figure 1-3. Distributed version control diagram."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:40
msgid ""
"Furthermore, many of these systems deal pretty well with having several "
"remote repositories they can work with, so you can collaborate with "
"different groups of people in different ways simultaneously within the same "
"project. This allows you to set up several types of workflows that aren’t "
"possible in centralized systems, such as hierarchical models."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:42
msgid "## A Short History of Git ##"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:44
msgid ""
"As with many great things in life, Git began with a bit of creative "
"destruction and fiery controversy. The Linux kernel is an open source "
"software project of fairly large scope. For most of the lifetime of the "
"Linux kernel maintenance (1991–2002), changes to the software were passed "
"around as patches and archived files. In 2002, the Linux kernel project "
"began using a proprietary DVCS system called BitKeeper."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:46
msgid ""
"In 2005, the relationship between the community that developed the Linux "
"kernel and the commercial company that developed BitKeeper broke down, and "
"the tool’s free-of-charge status was revoked. This prompted the Linux "
"development community (and in particular Linus Torvalds, the creator of "
"Linux) to develop their own tool based on some of the lessons they learned "
"while using BitKeeper. Some of the goals of the new system were as follows:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:48
msgid ""
"*\tSpeed\n"
"*\tSimple design\n"
"*\tStrong support for non-linear development (thousands of parallel branches)\n"
"*\tFully distributed\n"
"*\tAble to handle large projects like the Linux kernel efficiently (speed and "
"data size)"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:54
msgid ""
"Since its birth in 2005, Git has evolved and matured to be easy to use and "
"yet retain these initial qualities. It’s incredibly fast, it’s very "
"efficient with large projects, and it has an incredible branching system for "
"non-linear development (See Chapter 3)."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:56
msgid "## Git Basics ##"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:58
msgid ""
"So, what is Git in a nutshell? This is an important section to absorb, "
"because if you understand what Git is and the fundamentals of how it works, "
"then using Git effectively will probably be much easier for you. As you "
"learn Git, try to clear your mind of the things you may know about other "
"VCSs, such as Subversion and Perforce; doing so will help you avoid subtle "
"confusion when using the tool. Git stores and thinks about information much "
"differently than these other systems, even though the user interface is "
"fairly similar; understanding those differences will help prevent you from "
"becoming confused while using it."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:60
msgid "### Snapshots, Not Differences ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:62
msgid ""
"The major difference between Git and any other VCS (Subversion and friends "
"included) is the way Git thinks about its data. Conceptually, most other "
"systems store information as a list of file-based changes. These systems "
"(CVS, Subversion, Perforce, Bazaar, and so on) think of the information they "
"keep as a set of files and the changes made to each file over time, as "
"illustrated in Figure 1-4."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:64
msgid ""
"Insert 18333fig0104.png \n"
"Figure 1-4. Other systems tend to store data as changes to a base version of "
"each file."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:67
msgid ""
"Git doesn’t think of or store its data this way. Instead, Git thinks of its "
"data more like a set of snapshots of a mini filesystem. Every time you "
"commit, or save the state of your project in Git, it basically takes a "
"picture of what all your files look like at that moment and stores a "
"reference to that snapshot. To be efficient, if files have not changed, Git "
"doesn’t store the file again—just a link to the previous identical file it "
"has already stored. Git thinks about its data more like Figure 1-5. "
msgstr ""

#: en/01-introduction/01-chapter1.markdown:69
msgid ""
"Insert 18333fig0105.png \n"
"Figure 1-5. Git stores data as snapshots of the project over time."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:72
msgid ""
"This is an important distinction between Git and nearly all other VCSs. It "
"makes Git reconsider almost every aspect of version control that most other "
"systems copied from the previous generation. This makes Git more like a mini "
"filesystem with some incredibly powerful tools built on top of it, rather "
"than simply a VCS. We’ll explore some of the benefits you gain by thinking "
"of your data this way when we cover Git branching in Chapter 3."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:74
msgid "### Nearly Every Operation Is Local ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:76
msgid ""
"Most operations in Git only need local files and resources to operate — "
"generally no information is needed from another computer on your network.  "
"If you’re used to a CVCS where most operations have that network latency "
"overhead, this aspect of Git will make you think that the gods of speed have "
"blessed Git with unworldly powers. Because you have the entire history of "
"the project right there on your local disk, most operations seem almost "
"instantaneous."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:78
msgid ""
"For example, to browse the history of the project, Git doesn’t need to go "
"out to the server to get the history and display it for you—it simply reads "
"it directly from your local database. This means you see the project history "
"almost instantly. If you want to see the changes introduced between the "
"current version of a file and the file a month ago, Git can look up the file "
"a month ago and do a local difference calculation, instead of having to "
"either ask a remote server to do it or pull an older version of the file "
"from the remote server to do it locally."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:80
msgid ""
"This also means that there is very little you can’t do if you’re offline or "
"off VPN. If you get on an airplane or a train and want to do a little work, "
"you can commit happily until you get to a network connection to upload. If "
"you go home and can’t get your VPN client working properly, you can still "
"work. In many other systems, doing so is either impossible or painful. In "
"Perforce, for example, you can’t do much when you aren’t connected to the "
"server; and in Subversion and CVS, you can edit files, but you can’t commit "
"changes to your database (because your database is offline). This may not "
"seem like a huge deal, but you may be surprised what a big difference it can "
"make."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:82
msgid "### Git Has Integrity ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:84
msgid ""
"Everything in Git is check-summed before it is stored and is then referred "
"to by that checksum. This means it’s impossible to change the contents of "
"any file or directory without Git knowing about it. This functionality is "
"built into Git at the lowest levels and is integral to its philosophy. You "
"can’t lose information in transit or get file corruption without Git being "
"able to detect it."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:86
msgid ""
"The mechanism that Git uses for this checksumming is called a SHA-1 hash. "
"This is a 40-character string composed of hexadecimal characters (0–9 and "
"a–f) and calculated based on the contents of a file or directory structure "
"in Git. A SHA-1 hash looks something like this:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:88
msgid "\t24b9da6552252987aa493b52f8696cd6d3b00373"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:90
msgid ""
"You will see these hash values all over the place in Git because it uses "
"them so much. In fact, Git stores everything not by file name but in the Git "
"database addressable by the hash value of its contents."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:92
msgid "### Git Generally Only Adds Data ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:94
msgid ""
"When you do actions in Git, nearly all of them only add data to the Git "
"database. It is very difficult to get the system to do anything that is not "
"undoable or to make it erase data in any way. As in any VCS, you can lose or "
"mess up changes you haven’t committed yet; but after you commit a snapshot "
"into Git, it is very difficult to lose, especially if you regularly push "
"your database to another repository."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:96
msgid ""
"This makes using Git a joy because we know we can experiment without the "
"danger of severely screwing things up. For a more in-depth look at how Git "
"stores its data and how you can recover data that seems lost, see Chapter 9."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:98
msgid "### The Three States ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:100
msgid ""
"Now, pay attention. This is the main thing to remember about Git if you want "
"the rest of your learning process to go smoothly. Git has three main states "
"that your files can reside in: committed, modified, and staged. Committed "
"means that the data is safely stored in your local database. Modified means "
"that you have changed the file but have not committed it to your database "
"yet. Staged means that you have marked a modified file in its current "
"version to go into your next commit snapshot."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:102
msgid ""
"This leads us to the three main sections of a Git project: the Git "
"directory, the working directory, and the staging area."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:104
msgid ""
"Insert 18333fig0106.png \n"
"Figure 1-6. Working directory, staging area, and git directory."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:107
msgid ""
"The Git directory is where Git stores the metadata and object database for "
"your project. This is the most important part of Git, and it is what is "
"copied when you clone a repository from another computer."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:109
msgid ""
"The working directory is a single checkout of one version of the project. "
"These files are pulled out of the compressed database in the Git directory "
"and placed on disk for you to use or modify."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:111
msgid ""
"The staging area is a simple file, generally contained in your Git "
"directory, that stores information about what will go into your next commit. "
"It’s sometimes referred to as the index, but it’s becoming standard to "
"refer to it as the staging area."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:113
msgid "The basic Git workflow goes something like this:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:115
msgid ""
"1. You modify files in your working directory.\n"
"2. You stage the files, adding snapshots of them to your staging area.\n"
"3. You do a commit, which takes the files as they are in the staging area "
"and stores that snapshot permanently to your Git directory."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:119
msgid ""
"If a particular version of a file is in the git directory, it’s considered "
"committed. If it’s modified but has been added to the staging area, it is "
"staged. And if it was changed since it was checked out but has not been "
"staged, it is modified. In Chapter 2, you’ll learn more about these states "
"and how you can either take advantage of them or skip the staged part "
"entirely."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:121
msgid "## Installing Git ##"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:123
msgid ""
"Let’s get into using some Git. First things first—you have to install it. "
"You can get it a number of ways; the two major ones are to install it from "
"source or to install an existing package for your platform."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:125
msgid "### Installing from Source ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:127
msgid ""
"If you can, it’s generally useful to install Git from source, because you’ll "
"get the most recent version. Each version of Git tends to include useful UI "
"enhancements, so getting the latest version is often the best route if you "
"feel comfortable compiling software from source. It is also the case that "
"many Linux distributions contain very old packages; so unless you’re on a "
"very up-to-date distro or are using backports, installing from source may be "
"the best bet."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:129
msgid ""
"To install Git, you need to have the following libraries that Git depends "
"on: curl, zlib, openssl, expat, and libiconv. For example, if you’re on a "
"system that has yum (such as Fedora) or apt-get (such as a Debian based "
"system), you can use one of these commands to install all of the "
"dependencies:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:131
msgid ""
"\t$ yum install curl-devel expat-devel gettext-devel \\\n"
"\t  openssl-devel zlib-devel"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:134
msgid ""
"\t$ apt-get install libcurl4-gnutls-dev libexpat1-dev gettext \\\n"
"\t  libz-dev libssl-dev"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:137
msgid ""
"When you have all the necessary dependencies, you can go ahead and grab the "
"latest snapshot from the Git web site:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:139
msgid "\thttp://git-scm.com/download"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:141
msgid "Then, compile and install:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:143
msgid ""
"\t$ tar -zxf git-1.7.2.2.tar.gz\n"
"\t$ cd git-1.7.2.2\n"
"\t$ make prefix=/usr/local all\n"
"\t$ sudo make prefix=/usr/local install"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:148
msgid "After this is done, you can also get Git via Git itself for updates:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:150
msgid "\t$ git clone git://git.kernel.org/pub/scm/git/git.git"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:152
msgid "### Installing on Linux ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:154
msgid ""
"If you want to install Git on Linux via a binary installer, you can "
"generally do so through the basic package-management tool that comes with "
"your distribution. If you’re on Fedora, you can use yum:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:156
msgid "\t$ yum install git-core"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:158
msgid "Or if you’re on a Debian-based distribution like Ubuntu, try apt-get:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:160
msgid "\t$ apt-get install git-core"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:162
msgid "### Installing on Mac ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:164
msgid ""
"There are two easy ways to install Git on a Mac. The easiest is to use the "
"graphical Git installer, which you can download from the Google Code page "
"(see Figure 1-7):"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:166
msgid "\thttp://code.google.com/p/git-osx-installer"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:168
msgid ""
"Insert 18333fig0107.png \n"
"Figure 1-7. Git OS X installer."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:171
msgid ""
"The other major way is to install Git via MacPorts "
"(`http://www.macports.org`). If you have MacPorts installed, install Git via"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:173
msgid "\t$ sudo port install git-core +svn +doc +bash_completion +gitweb"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:175
msgid ""
"You don’t have to add all the extras, but you’ll probably want to include "
"+svn in case you ever have to use Git with Subversion repositories (see "
"Chapter 8)."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:177
msgid "### Installing on Windows ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:179
msgid ""
"Installing Git on Windows is very easy. The msysGit project has one of the "
"easier installation procedures. Simply download the installer exe file from "
"the Google Code page, and run it:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:181
msgid "\thttp://code.google.com/p/msysgit"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:183
msgid ""
"After it’s installed, you have both a command-line version (including an SSH "
"client that will come in handy later) and the standard GUI."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:185
msgid "## First-Time Git Setup ##"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:187
msgid ""
"Now that you have Git on your system, you’ll want to do a few things to "
"customize your Git environment. You should have to do these things only "
"once; they’ll stick around between upgrades. You can also change them at any "
"time by running through the commands again."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:189
msgid ""
"Git comes with a tool called git config that lets you get and set "
"configuration variables that control all aspects of how Git looks and "
"operates. These variables can be stored in three different places:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:191
msgid ""
"*\t`/etc/gitconfig` file: Contains values for every user on the system and "
"all their repositories. If you pass the option` --system` to `git config`, "
"it reads and writes from this file specifically. \n"
"*\t`~/.gitconfig` file: Specific to your user. You can make Git read and "
"write to this file specifically by passing the `--global` option. \n"
"*\tconfig file in the git directory (that is, `.git/config`) of whatever "
"repository you’re currently using: Specific to that single repository. Each "
"level overrides values in the previous level, so values in `.git/config` "
"trump those in `/etc/gitconfig`."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:195
msgid ""
"On Windows systems, Git looks for the `.gitconfig` file in the `$HOME` "
"directory (`C:\\Documents and Settings\\$USER` for most people). It also still "
"looks for /etc/gitconfig, although it’s relative to the MSys root, which is "
"wherever you decide to install Git on your Windows system when you run the "
"installer."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:197
msgid "### Your Identity ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:199
msgid ""
"The first thing you should do when you install Git is to set your user name "
"and e-mail address. This is important because every Git commit uses this "
"information, and it’s immutably baked into the commits you pass around:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:201
msgid ""
"\t$ git config --global user.name \"John Doe\"\n"
"\t$ git config --global user.email johndoe@example.com"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:204
msgid ""
"Again, you need to do this only once if you pass the `--global` option, "
"because then Git will always use that information for anything you do on "
"that system. If you want to override this with a different name or e-mail "
"address for specific projects, you can run the command without the "
"`--global` option when you’re in that project."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:206
msgid "### Your Editor ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:208
msgid ""
"Now that your identity is set up, you can configure the default text editor "
"that will be used when Git needs you to type in a message. By default, Git "
"uses your system’s default editor, which is generally Vi or Vim. If you want "
"to use a different text editor, such as Emacs, you can do the following:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:210
msgid "\t$ git config --global core.editor emacs"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:212
msgid "### Your Diff Tool ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:214
msgid ""
"Another useful option you may want to configure is the default diff tool to "
"use to resolve merge conflicts. Say you want to use vimdiff:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:216
msgid "\t$ git config --global merge.tool vimdiff"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:218
msgid ""
"Git accepts kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, "
"ecmerge, and opendiff as valid merge tools. You can also set up a custom "
"tool; see Chapter 7 for more information about doing that."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:220
msgid "### Checking Your Settings ###"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:222
msgid ""
"If you want to check your settings, you can use the `git config --list` "
"command to list all the settings Git can find at that point:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:224
msgid ""
"\t$ git config --list\n"
"\tuser.name=Scott Chacon\n"
"\tuser.email=schacon@gmail.com\n"
"\tcolor.status=auto\n"
"\tcolor.branch=auto\n"
"\tcolor.interactive=auto\n"
"\tcolor.diff=auto\n"
"\t..."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:233
msgid ""
"You may see keys more than once, because Git reads the same key from "
"different files (`/etc/gitconfig` and `~/.gitconfig`, for example). In this "
"case, Git uses the last value for each unique key it sees."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:235
msgid ""
"You can also check what Git thinks a specific key’s value is by typing `git "
"config {key}`:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:237
msgid ""
"\t$ git config user.name\n"
"\tScott Chacon"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:240
msgid "## Getting Help ##"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:242
msgid ""
"If you ever need help while using Git, there are three ways to get the "
"manual page (manpage) help for any of the Git commands:"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:244
msgid ""
"\t$ git help <verb>\n"
"\t$ git <verb> --help\n"
"\t$ man git-<verb>"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:248
msgid ""
"For example, you can get the manpage help for the config command by running"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:250
msgid "\t$ git help config"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:252
msgid ""
"These commands are nice because you can access them anywhere, even offline.\n"
"If the manpages and this book aren’t enough and you need in-person help, you "
"can try the `#git` or `#github` channel on the Freenode IRC server "
"(irc.freenode.net). These channels are regularly filled with hundreds of "
"people who are all very knowledgeable about Git and are often willing to "
"help."
msgstr ""

#: en/01-introduction/01-chapter1.markdown:255
msgid "## Summary ##"
msgstr ""

#: en/01-introduction/01-chapter1.markdown:257
msgid ""
"You should have a basic understanding of what Git is and how it’s different "
"from the CVCS you may have been using. You should also now have a working "
"version of Git on your system that’s set up with your personal identity. "
"It’s now time to learn some Git basics."
msgstr ""
