#. extracted from en/04-git-server/01-chapter4.markdown
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2013-01-03 12:06+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.9.0\n"

#: en/04-git-server/01-chapter4.markdown:1
msgid "# Git on the Server #"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:3
msgid ""
"At this point, you should be able to do most of the day-to-day tasks for "
"which you’ll be using Git. However, in order to do any collaboration in Git, "
"you’ll need to have a remote Git repository. Although you can technically "
"push changes to and pull changes from individuals’ repositories, doing so is "
"discouraged because you can fairly easily confuse what they’re working on "
"if you’re not careful. Furthermore, you want your collaborators to be able "
"to access the repository even if your computer is offline — having a more "
"reliable common repository is often useful. Therefore, the preferred method "
"for collaborating with someone is to set up an intermediate repository that "
"you both have access to, and push to and pull from that. We’ll refer to this "
"repository as a \"Git server\"; but you’ll notice that it generally takes a "
"tiny amount of resources to host a Git repository, so you’ll rarely need to "
"use an entire server for it."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:5
msgid ""
"Running a Git server is simple. First, you choose which protocols you want "
"your server to communicate with. The first section of this chapter will "
"cover the available protocols and the pros and cons of each. The next "
"sections will explain some typical setups using those protocols and how to "
"get your server running with them. Last, we’ll go over a few hosted options, "
"if you don’t mind hosting your code on someone else’s server and don’t want "
"to go through the hassle of setting up and maintaining your own server."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:7
msgid ""
"If you have no interest in running your own server, you can skip to the last "
"section of the chapter to see some options for setting up a hosted account "
"and then move on to the next chapter, where we discuss the various ins and "
"outs of working in a distributed source control environment."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:9
msgid ""
"A remote repository is generally a _bare repository_ — a Git repository that "
"has no working directory. Because the repository is only used as a "
"collaboration point, there is no reason to have a snapshot checked out on "
"disk; it’s just the Git data. In the simplest terms, a bare repository is "
"the contents of your project’s `.git` directory and nothing else."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:11
msgid "## The Protocols ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:13
msgid ""
"Git can use four major network protocols to transfer data: Local, Secure "
"Shell (SSH), Git, and HTTP. Here we’ll discuss what they are and in what "
"basic circumstances you would want (or not want) to use them."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:15
msgid ""
"It’s important to note that with the exception of the HTTP protocols, all of "
"these require Git to be installed and working on the server."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:17
msgid "### Local Protocol ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:19
msgid ""
"The most basic is the _Local protocol_, in which the remote repository is in "
"another directory on disk. This is often used if everyone on your team has "
"access to a shared filesystem such as an NFS mount, or in the less likely "
"case that everyone logs in to the same computer. The latter wouldn’t be "
"ideal, because all your code repository instances would reside on the same "
"computer, making a catastrophic loss much more likely."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:21
msgid ""
"If you have a shared mounted filesystem, then you can clone, push to, and "
"pull from a local file-based repository. To clone a repository like this or "
"to add one as a remote to an existing project, use the path to the "
"repository as the URL. For example, to clone a local repository, you can run "
"something like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:23
msgid "\t$ git clone /opt/git/project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:25
msgid "Or you can do this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:27
msgid "\t$ git clone file:///opt/git/project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:29
msgid ""
"Git operates slightly differently if you explicitly specify `file://` at the "
"beginning of the URL. If you just specify the path, Git tries to use "
"hardlinks or directly copy the files it needs. If you specify `file://`, Git "
"fires up the processes that it normally uses to transfer data over a "
"network which is generally a lot less efficient method of transferring the "
"data. The main reason to specify the `file://` prefix is if you want a clean "
"copy of the repository with extraneous references or objects left out — "
"generally after an import from another version-control system or something "
"similar (see Chapter 9 for maintenance tasks). We’ll use the normal path "
"here because doing so is almost always faster."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:31
msgid ""
"To add a local repository to an existing Git project, you can run something "
"like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:33
msgid "\t$ git remote add local_proj /opt/git/project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:35
msgid ""
"Then, you can push to and pull from that remote as though you were doing so "
"over a network."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:37
msgctxt "en/04-git-server/01-chapter4.markdown:37"
msgid "#### The Pros ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:39
msgid ""
"The pros of file-based repositories are that they’re simple and they use "
"existing file permissions and network access. If you already have a shared "
"filesystem to which your whole team has access, setting up a repository is "
"very easy. You stick the bare repository copy somewhere everyone has shared "
"access to and set the read/write permissions as you would for any other "
"shared directory. We’ll discuss how to export a bare repository copy for "
"this purpose in the next section, “Getting Git on a Server.”"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:41
msgid ""
"This is also a nice option for quickly grabbing work from someone else’s "
"working repository. If you and a co-worker are working on the same project "
"and they want you to check something out, running a command like `git pull "
"/home/john/project` is often easier than them pushing to a remote server and "
"you pulling down."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:43
msgctxt "en/04-git-server/01-chapter4.markdown:43"
msgid "#### The Cons ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:45
msgid ""
"The cons of this method are that shared access is generally more difficult "
"to set up and reach from multiple locations than basic network access. If "
"you want to push from your laptop when you’re at home, you have to mount the "
"remote disk, which can be difficult and slow compared to network-based "
"access."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:47
msgid ""
"It’s also important to mention that this isn’t necessarily the fastest "
"option if you’re using a shared mount of some kind. A local repository is "
"fast only if you have fast access to the data. A repository on NFS is often "
"slower than the repository over SSH on the same server, allowing Git to run "
"off local disks on each system."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:49
msgid "### The SSH Protocol ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:51
msgid ""
"Probably the most common transport protocol for Git is SSH. This is because "
"SSH access to servers is already set up in most places — and if it isn’t, "
"it’s easy to do. SSH is also the only network-based protocol that you can "
"easily read from and write to. The other two network protocols (HTTP and "
"Git) are generally read-only, so even if you have them available for the "
"unwashed masses, you still need SSH for your own write commands. SSH is also "
"an authenticated network protocol; and because it’s ubiquitous, it’s "
"generally easy to set up and use."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:53
msgid ""
"To clone a Git repository over SSH, you can specify ssh:// URL like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:55
msgid "\t$ git clone ssh://user@server:project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:57
msgid ""
"Or you can not specify a protocol — Git assumes SSH if you aren’t explicit:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:59
msgid "\t$ git clone user@server:project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:61
msgid ""
"You can also not specify a user, and Git assumes the user you’re currently "
"logged in as."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:63
msgctxt "en/04-git-server/01-chapter4.markdown:63"
msgid "#### The Pros ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:65
msgid ""
"The pros of using SSH are many. First, you basically have to use it if you "
"want authenticated write access to your repository over a network. Second, "
"SSH is relatively easy to set up — SSH daemons are commonplace, many network "
"admins have experience with them, and many OS distributions are set up with "
"them or have tools to manage them. Next, access over SSH is secure — all "
"data transfer is encrypted and authenticated. Last, like the Git and Local "
"protocols, SSH is efficient, making the data as compact as possible before "
"transferring it."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:67
msgctxt "en/04-git-server/01-chapter4.markdown:67"
msgid "#### The Cons ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:69
msgid ""
"The negative aspect of SSH is that you can’t serve anonymous access of your "
"repository over it. People must have access to your machine over SSH to "
"access it, even in a read-only capacity, which doesn’t make SSH access "
"conducive to open source projects. If you’re using it only within your "
"corporate network, SSH may be the only protocol you need to deal with. If "
"you want to allow anonymous read-only access to your projects, you’ll have "
"to set up SSH for you to push over but something else for others to pull "
"over."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:71
msgid "### The Git Protocol ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:73
msgid ""
"Next is the Git protocol. This is a special daemon that comes packaged with "
"Git; it listens on a dedicated port (9418) that provides a service similar "
"to the SSH protocol, but with absolutely no authentication. In order for a "
"repository to be served over the Git protocol, you must create the `git-"
"export-daemon-ok` file — the daemon won’t serve a repository without that "
"file in it — but other than that there is no security. Either the Git "
"repository is available for everyone to clone or it isn’t. This means that "
"there is generally no pushing over this protocol. You can enable push "
"access; but given the lack of authentication, if you turn on push access, "
"anyone on the internet who finds your project’s URL could push to your "
"project. Suffice it to say that this is rare."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:75
msgctxt "en/04-git-server/01-chapter4.markdown:75"
msgid "#### The Pros ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:77
msgid ""
"The Git protocol is the fastest transfer protocol available. If you’re "
"serving a lot of traffic for a public project or serving a very large "
"project that doesn’t require user authentication for read access, it’s "
"likely that you’ll want to set up a Git daemon to serve your project. It "
"uses the same data-transfer mechanism as the SSH protocol but without the "
"encryption and authentication overhead."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:79
msgctxt "en/04-git-server/01-chapter4.markdown:79"
msgid "#### The Cons ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:81
msgid ""
"The downside of the Git protocol is the lack of authentication. It’s "
"generally undesirable for the Git protocol to be the only access to your "
"project. Generally, you’ll pair it with SSH access for the few developers "
"who have push (write) access and have everyone else use `git://` for read-"
"only access.\n"
"It’s also probably the most difficult protocol to set up. It must run its "
"own daemon, which is custom — we’ll look at setting one up in the “Gitosis” "
"section of this chapter — it requires `xinetd` configuration or the like, "
"which isn’t always a walk in the park. It also requires firewall access to "
"port 9418, which isn’t a standard port that corporate firewalls always "
"allow. Behind big corporate firewalls, this obscure port is commonly "
"blocked."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:84
msgid "### The HTTP/S Protocol ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:86
msgid ""
"Last we have the HTTP protocol. The beauty of the HTTP or HTTPS protocol is "
"the simplicity of setting it up. Basically, all you have to do is put the "
"bare Git repository under your HTTP document root and set up a specific "
"`post-update` hook, and you’re done (See Chapter 7 for details on Git "
"hooks). At that point, anyone who can access the web server under which you "
"put the repository can also clone your repository. To allow read access to "
"your repository over HTTP, do something like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:88
msgid ""
"\t$ cd /var/www/htdocs/\n"
"\t$ git clone --bare /path/to/git_project gitproject.git\n"
"\t$ cd gitproject.git\n"
"\t$ mv hooks/post-update.sample hooks/post-update\n"
"\t$ chmod a+x hooks/post-update"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:94
msgid ""
"That’s all. The `post-update` hook that comes with Git by default runs the "
"appropriate command (`git update-server-info`) to make HTTP fetching and "
"cloning work properly. This command is run when you push to this repository "
"over SSH; then, other people can clone via something like"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:96
msgid "\t$ git clone http://example.com/gitproject.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:98
msgid ""
"In this particular case, we’re using the `/var/www/htdocs` path that is "
"common for Apache setups, but you can use any static web server — just put "
"the bare repository in its path. The Git data is served as basic static "
"files (see Chapter 9 for details about exactly how it’s served)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:100
msgid ""
"It’s possible to make Git push over HTTP as well, although that technique "
"isn’t as widely used and requires you to set up complex WebDAV requirements. "
"Because it’s rarely used, we won’t cover it in this book. If you’re "
"interested in using the HTTP-push protocols, you can read about preparing a "
"repository for this purpose at "
"`http://www.kernel.org/pub/software/scm/git/docs/howto/setup-git-server-"
"over-http.txt`. One nice thing about making Git push over HTTP is that you "
"can use any WebDAV server, without specific Git features; so, you can use "
"this functionality if your web-hosting provider supports WebDAV for writing "
"updates to your web site."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:102
msgctxt "en/04-git-server/01-chapter4.markdown:102"
msgid "#### The Pros ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:104
msgid ""
"The upside of using the HTTP protocol is that it’s easy to set up. Running "
"the handful of required commands gives you a simple way to give the world "
"read access to your Git repository. It takes only a few minutes to do. The "
"HTTP protocol also isn’t very resource intensive on your server. Because it "
"generally uses a static HTTP server to serve all the data, a normal Apache "
"server can serve thousands of files per second on average — it’s difficult "
"to overload even a small server."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:106
msgid ""
"You can also serve your repositories read-only over HTTPS, which means you "
"can encrypt the content transfer; or you can go so far as to make the "
"clients use specific signed SSL certificates. Generally, if you’re going to "
"these lengths, it’s easier to use SSH public keys; but it may be a better "
"solution in your specific case to use signed SSL certificates or other HTTP-"
"based authentication methods for read-only access over HTTPS."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:108
msgid ""
"Another nice thing is that HTTP is such a commonly used protocol that "
"corporate firewalls are often set up to allow traffic through this port."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:110
msgctxt "en/04-git-server/01-chapter4.markdown:110"
msgid "#### The Cons ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:112
msgid ""
"The downside of serving your repository over HTTP is that it’s relatively "
"inefficient for the client. It generally takes a lot longer to clone or "
"fetch from the repository, and you often have a lot more network overhead "
"and transfer volume over HTTP than with any of the other network protocols. "
"Because it’s not as intelligent about transferring only the data you need — "
"there is no dynamic work on the part of the server in these transactions — "
"the HTTP protocol is often referred to as a _dumb_ protocol. For more "
"information about the differences in efficiency between the HTTP protocol "
"and the other protocols, see Chapter 9."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:114
msgid "## Getting Git on a Server ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:116
msgid ""
"In order to initially set up any Git server, you have to export an existing "
"repository into a new bare repository — a repository that doesn’t contain a "
"working directory. This is generally straightforward to do.\n"
"In order to clone your repository to create a new bare repository, you run "
"the clone command with the `--bare` option. By convention, bare repository "
"directories end in `.git`, like so:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:119
msgid ""
"\t$ git clone --bare my_project my_project.git\n"
"\tInitialized empty Git repository in /opt/projects/my_project.git/"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:122
msgid ""
"The output for this command is a little confusing. Since `clone` is "
"basically a `git init` then a `git fetch`, we see some output from the `git "
"init` part, which creates an empty directory. The actual object transfer "
"gives no output, but it does happen. You should now have a copy of the Git "
"directory data in your `my_project.git` directory."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:124
msgid "This is roughly equivalent to something like"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:126
msgid "\t$ cp -Rf my_project/.git my_project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:128
msgid ""
"There are a couple of minor differences in the configuration file; but for "
"your purpose, this is close to the same thing. It takes the Git repository "
"by itself, without a working directory, and creates a directory specifically "
"for it alone."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:130
msgid "### Putting the Bare Repository on a Server ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:132
msgid ""
"Now that you have a bare copy of your repository, all you need to do is put "
"it on a server and set up your protocols. Let’s say you’ve set up a server "
"called `git.example.com` that you have SSH access to, and you want to store "
"all your Git repositories under the `/opt/git` directory. You can set up "
"your new repository by copying your bare repository over:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:134
msgid "\t$ scp -r my_project.git user@git.example.com:/opt/git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:136
msgid ""
"At this point, other users who have SSH access to the same server which has "
"read-access to the `/opt/git` directory can clone your repository by running"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:138
msgid "\t$ git clone user@git.example.com:/opt/git/my_project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:140
msgid ""
"If a user SSHs into a server and has write access to the "
"`/opt/git/my_project.git` directory, they will also automatically have push "
"access.  Git will automatically add group write permissions to a repository "
"properly if you run the `git init` command with the `--shared` option."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:142
msgid ""
"\t$ ssh user@git.example.com\n"
"\t$ cd /opt/git/my_project.git\n"
"\t$ git init --bare --shared"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:146
msgid ""
"You see how easy it is to take a Git repository, create a bare version, and "
"place it on a server to which you and your collaborators have SSH access. "
"Now you’re ready to collaborate on the same project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:148
msgid ""
"It’s important to note that this is literally all you need to do to run a "
"useful Git server to which several people have access — just add SSH-able "
"accounts on a server, and stick a bare repository somewhere that all those "
"users have read and write access to. You’re ready to go — nothing else "
"needed."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:150
msgid ""
"In the next few sections, you’ll see how to expand to more sophisticated "
"setups. This discussion will include not having to create user accounts for "
"each user, adding public read access to repositories, setting up web UIs, "
"using the Gitosis tool, and more. However, keep in mind that to collaborate "
"with a couple of people on a private project, all you _need_ is an SSH "
"server and a bare repository."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:152
msgid "### Small Setups ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:154
msgid ""
"If you’re a small outfit or are just trying out Git in your organization and "
"have only a few developers, things can be simple for you. One of the most "
"complicated aspects of setting up a Git server is user management. If you "
"want some repositories to be read-only to certain users and read/write to "
"others, access and permissions can be a bit difficult to arrange."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:156
msgid "#### SSH Access ####"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:158
msgid ""
"If you already have a server to which all your developers have SSH access, "
"it’s generally easiest to set up your first repository there, because you "
"have to do almost no work (as we covered in the last section). If you want "
"more complex access control type permissions on your repositories, you can "
"handle them with the normal filesystem permissions of the operating system "
"your server runs."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:160
msgid ""
"If you want to place your repositories on a server that doesn’t have "
"accounts for everyone on your team whom you want to have write access, then "
"you must set up SSH access for them. We assume that if you have a server "
"with which to do this, you already have an SSH server installed, and that’s "
"how you’re accessing the server."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:162
msgid ""
"There are a few ways you can give access to everyone on your team. The first "
"is to set up accounts for everybody, which is straightforward but can be "
"cumbersome. You may not want to run `adduser` and set temporary passwords "
"for every user."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:164
msgid ""
"A second method is to create a single 'git' user on the machine, ask every "
"user who is to have write access to send you an SSH public key, and add that "
"key to the `~/.ssh/authorized_keys` file of your new 'git' user. At that "
"point, everyone will be able to access that machine via the 'git' user. This "
"doesn’t affect the commit data in any way — the SSH user you connect as "
"doesn’t affect the commits you’ve recorded."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:166
msgid ""
"Another way to do it is to have your SSH server authenticate from an LDAP "
"server or some other centralized authentication source that you may already "
"have set up. As long as each user can get shell access on the machine, any "
"SSH authentication mechanism you can think of should work."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:168
msgid "## Generating Your SSH Public Key ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:170
msgid ""
"That being said, many Git servers authenticate using SSH public keys. In "
"order to provide a public key, each user in your system must generate one if "
"they don’t already have one. This process is similar across all operating "
"systems.\n"
"First, you should check to make sure you don’t already have a key. By "
"default, a user’s SSH keys are stored in that user’s `~/.ssh` directory. You "
"can easily check to see if you have a key already by going to that "
"directory and listing the contents:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:173
msgid ""
"\t$ cd ~/.ssh\n"
"\t$ ls\n"
"\tauthorized_keys2  id_dsa       known_hosts\n"
"\tconfig            id_dsa.pub"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:178
msgid ""
"You’re looking for a pair of files named something and something.pub, where "
"the something is usually `id_dsa` or `id_rsa`. The `.pub` file is your "
"public key, and the other file is your private key. If you don’t have these "
"files (or you don’t even have a `.ssh` directory), you can create them by "
"running a program called `ssh-keygen`, which is provided with the SSH "
"package on Linux/Mac systems and comes with the MSysGit package on Windows:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:180
msgid ""
"\t$ ssh-keygen\n"
"\tGenerating public/private rsa key pair.\n"
"\tEnter file in which to save the key (/Users/schacon/.ssh/id_rsa):\n"
"\tEnter passphrase (empty for no passphrase):\n"
"\tEnter same passphrase again:\n"
"\tYour identification has been saved in /Users/schacon/.ssh/id_rsa.\n"
"\tYour public key has been saved in /Users/schacon/.ssh/id_rsa.pub.\n"
"\tThe key fingerprint is:\n"
"\t43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a schacon@agadorlaptop.local"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:190
msgid ""
"First it confirms where you want to save the key (`.ssh/id_rsa`), and then "
"it asks twice for a passphrase, which you can leave empty if you don’t want "
"to type a password when you use the key."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:192
msgid ""
"Now, each user that does this has to send their public key to you or whoever "
"is administrating the Git server (assuming you’re using an SSH server setup "
"that requires public keys). All they have to do is copy the contents of the "
"`.pub` file and e-mail it. The public keys look something like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:194
msgid ""
"\t$ cat ~/.ssh/id_rsa.pub\n"
"\tssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAklOUpkDHrfHY17SbrmTIpNLTGK9Tjom/BWDSU\n"
"\tGPl+nafzlHDTYW7hdI4yZ5ew18JH4JW9jbhUFrviQzM7xlELEVf4h9lFX5QVkbPppSwg0cda3\n"
"\tPbv7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8V6RjsNAQwdsdMFvSlVK/7XA\n"
"\tt3FaoJoAsncM1Q9x5+3V0Ww68/eIFmb1zuUFljQJKprrX88XypNDvjYNby6vw/Pb0rwert/En\n"
"\tmZ+AW4OZPnTPI89ZPmVMLuayrD2cE86Z/il8b+gw3r3+1nKatmIkjn2so1d01QraTlMqVSsbx\n"
"\tNrRFi9wrf+M7Q== schacon@agadorlaptop.local"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:202
msgid ""
"For a more in-depth tutorial on creating an SSH key on multiple operating "
"systems, see the GitHub guide on SSH keys at `http://github.com/guides"
"/providing-your-ssh-key`."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:204
msgid "## Setting Up the Server ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:206
msgid ""
"Let’s walk through setting up SSH access on the server side. In this "
"example, you’ll use the `authorized_keys` method for authenticating your "
"users. We also assume you’re running a standard Linux distribution like "
"Ubuntu. First, you create a 'git' user and a `.ssh` directory for that user."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:208
msgid ""
"\t$ sudo adduser git\n"
"\t$ su git\n"
"\t$ cd\n"
"\t$ mkdir .ssh"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:213
msgid ""
"Next, you need to add some developer SSH public keys to the "
"`authorized_keys` file for that user. Let’s assume you’ve received a few "
"keys by e-mail and saved them to temporary files. Again, the public keys "
"look something like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:215
msgid ""
"\t$ cat /tmp/id_rsa.john.pub\n"
"\tssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCB007n/ww+ouN4gSLKssMxXnBOvf9LGt4L\n"
"\tojG6rs6hPB09j9R/T17/x4lhJA0F3FR1rP6kYBRsWj2aThGw6HXLm9/5zytK6Ztg3RPKK+4k\n"
"\tYjh6541NYsnEAZuXz0jTTyAUfrtU3Z5E003C4oxOj6H0rfIF1kKI9MAQLMdpGW1GYEIgS9Ez\n"
"\tSdfd8AcCIicTDWbqLAcU4UpkaX8KyGlLwsNuuGztobF8m72ALC/nLF6JLtPofwFBlgc+myiv\n"
"\tO7TCUSBdLQlgMVOFq1I2uPWQOkOWQAHukEOmfjy2jctxSDBQ220ymjaNsHT4kgtZg2AYYgPq\n"
"\tdAv8JggJICUvax2T9va5 gsg-keypair"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:223
msgid "You just append them to your `authorized_keys` file:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:225
msgid ""
"\t$ cat /tmp/id_rsa.john.pub >> ~/.ssh/authorized_keys\n"
"\t$ cat /tmp/id_rsa.josie.pub >> ~/.ssh/authorized_keys\n"
"\t$ cat /tmp/id_rsa.jessica.pub >> ~/.ssh/authorized_keys"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:229
msgid ""
"Now, you can set up an empty repository for them by running `git init` with "
"the `--bare` option, which initializes the repository without a working "
"directory:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:231
msgid ""
"\t$ cd /opt/git\n"
"\t$ mkdir project.git\n"
"\t$ cd project.git\n"
"\t$ git --bare init"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:236
msgid ""
"Then, John, Josie, or Jessica can push the first version of their project "
"into that repository by adding it as a remote and pushing up a branch. Note "
"that someone must shell onto the machine and create a bare repository every "
"time you want to add a project. Let’s use `gitserver` as the hostname of the "
"server on which you’ve set up your 'git' user and repository. If you’re "
"running it internally, and you set up DNS for `gitserver` to point to that "
"server, then you can use the commands pretty much as is:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:238
msgid ""
"\t# on Johns computer\n"
"\t$ cd myproject\n"
"\t$ git init\n"
"\t$ git add .\n"
"\t$ git commit -m 'initial commit'\n"
"\t$ git remote add origin git@gitserver:/opt/git/project.git\n"
"\t$ git push origin master"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:246
msgid ""
"At this point, the others can clone it down and push changes back up just as "
"easily:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:248
msgid ""
"\t$ git clone git@gitserver:/opt/git/project.git\n"
"\t$ cd project\n"
"\t$ vim README\n"
"\t$ git commit -am 'fix for the README file'\n"
"\t$ git push origin master"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:254
msgid ""
"With this method, you can quickly get a read/write Git server up and running "
"for a handful of developers."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:256
msgid ""
"As an extra precaution, you can easily restrict the 'git' user to only doing "
"Git activities with a limited shell tool called `git-shell` that comes with "
"Git. If you set this as your 'git' user’s login shell, then the 'git' user "
"can’t have normal shell access to your server. To use this, specify `git-"
"shell` instead of bash or csh for your user’s login shell. To do so, you’ll "
"likely have to edit your `/etc/passwd` file:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:258
msgid "\t$ sudo vim /etc/passwd"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:260
msgid "At the bottom, you should find a line that looks something like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:262
msgctxt "en/04-git-server/01-chapter4.markdown:262"
msgid "\tgit:x:1000:1000::/home/git:/bin/sh"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:264
msgid ""
"Change `/bin/sh` to `/usr/bin/git-shell` (or run `which git-shell` to see "
"where it’s installed). The line should look something like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:266
msgctxt "en/04-git-server/01-chapter4.markdown:266"
msgid "\tgit:x:1000:1000::/home/git:/usr/bin/git-shell"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:268
msgid ""
"Now, the 'git' user can only use the SSH connection to push and pull Git "
"repositories and can’t shell onto the machine. If you try, you’ll see a "
"login rejection like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:270
msgid ""
"\t$ ssh git@gitserver\n"
"\tfatal: What do you think I am? A shell?\n"
"\tConnection to gitserver closed."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:274
msgid "## Public Access ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:276
msgid ""
"What if you want anonymous read access to your project? Perhaps instead of "
"hosting an internal private project, you want to host an open source "
"project. Or maybe you have a bunch of automated build servers or continuous "
"integration servers that change a lot, and you don’t want to have to "
"generate SSH keys all the time — you just want to add simple anonymous read "
"access."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:278
msgid ""
"Probably the simplest way for smaller setups is to run a static web server "
"with its document root where your Git repositories are, and then enable that "
"`post-update` hook we mentioned in the first section of this chapter. Let’s "
"work from the previous example. Say you have your repositories in the "
"`/opt/git` directory, and an Apache server is running on your machine. "
"Again, you can use any web server for this; but as an example, we’ll "
"demonstrate some basic Apache configurations that should give you an idea of "
"what you might need."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:280
msgid "First you need to enable the hook:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:282
msgid ""
"\t$ cd project.git\n"
"\t$ mv hooks/post-update.sample hooks/post-update\n"
"\t$ chmod a+x hooks/post-update"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:286
msgid ""
"If you’re using a version of Git earlier than 1.6, the `mv` command isn’t "
"necessary — Git started naming the hooks examples with the .sample postfix "
"only recently."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:288
msgid "What does this `post-update` hook do? It looks basically like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:290
msgid ""
"\t$ cat .git/hooks/post-update\n"
"\t#!/bin/sh\n"
"\texec git-update-server-info"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:294
msgid ""
"This means that when you push to the server via SSH, Git will run this "
"command to update the files needed for HTTP fetching."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:296
msgid ""
"Next, you need to add a VirtualHost entry to your Apache configuration with "
"the document root as the root directory of your Git projects. Here, we’re "
"assuming that you have wildcard DNS set up to send `*.gitserver` to whatever "
"box you’re using to run all this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:298
msgid ""
"\t<VirtualHost *:80>\n"
"\t    ServerName git.gitserver\n"
"\t    DocumentRoot /opt/git\n"
"\t    <Directory /opt/git/>\n"
"\t        Order allow, deny\n"
"\t        allow from all\n"
"\t    </Directory>\n"
"\t</VirtualHost>"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:307
msgid ""
"You’ll also need to set the Unix user group of the `/opt/git` directories to "
"`www-data` so your web server can read-access the repositories, because the "
"Apache instance running the CGI script will (by default) be running as that "
"user:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:309
msgid "\t$ chgrp -R www-data /opt/git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:311
msgid ""
"When you restart Apache, you should be able to clone your repositories under "
"that directory by specifying the URL for your project:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:313
msgid "\t$ git clone http://git.gitserver/project.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:315
msgid ""
"This way, you can set up HTTP-based read access to any of your projects for "
"a fair number of users in a few minutes. Another simple option for public "
"unauthenticated access is to start a Git daemon, although that requires you "
"to daemonize the process - we’ll cover this option in the next section, if "
"you prefer that route."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:317
msgid "## GitWeb ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:319
msgid ""
"Now that you have basic read/write and read-only access to your project, you "
"may want to set up a simple web-based visualizer. Git comes with a CGI "
"script called GitWeb that is commonly used for this. You can see GitWeb in "
"use at sites like `http://git.kernel.org` (see Figure 4-1)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:321
msgid ""
"Insert 18333fig0401.png\n"
"Figure 4-1. The GitWeb web-based user interface."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:324
msgid ""
"If you want to check out what GitWeb would look like for your project, Git "
"comes with a command to fire up a temporary instance if you have a "
"lightweight server on your system like `lighttpd` or `webrick`. On Linux "
"machines, `lighttpd` is often installed, so you may be able to get it to run "
"by typing `git instaweb` in your project directory. If you’re running a "
"Mac, Leopard comes preinstalled with Ruby, so `webrick` may be your best "
"bet. To start `instaweb` with a non-lighttpd handler, you can run it with "
"the `--httpd` option."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:326
msgid ""
"\t$ git instaweb --httpd=webrick\n"
"\t[2009-02-21 10:02:21] INFO  WEBrick 1.3.1\n"
"\t[2009-02-21 10:02:21] INFO  ruby 1.8.6 (2008-03-03) [universal-darwin9.0]"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:330
msgid ""
"That starts up an HTTPD server on port 1234 and then automatically starts a "
"web browser that opens on that page. It’s pretty easy on your part. When "
"you’re done and want to shut down the server, you can run the same command "
"with the `--stop` option:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:332
msgid "\t$ git instaweb --httpd=webrick --stop"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:334
msgid ""
"If you want to run the web interface on a server all the time for your team "
"or for an open source project you’re hosting, you’ll need to set up the CGI "
"script to be served by your normal web server. Some Linux distributions have "
"a `gitweb` package that you may be able to install via `apt` or `yum`, so "
"you may want to try that first. We’ll walk though installing GitWeb manually "
"very quickly. First, you need to get the Git source code, which GitWeb "
"comes with, and generate the custom CGI script:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:336
msgid ""
"\t$ git clone git://git.kernel.org/pub/scm/git/git.git\n"
"\t$ cd git/\n"
"\t$ make GITWEB_PROJECTROOT=\"/opt/git\" \\\n"
"\t        prefix=/usr gitweb\n"
"\t$ sudo cp -Rf gitweb /var/www/"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:342
msgid ""
"Notice that you have to tell the command where to find your Git repositories "
"with the `GITWEB_PROJECTROOT` variable. Now, you need to make Apache use "
"CGI for that script, for which you can add a VirtualHost:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:344
msgid ""
"\t<VirtualHost *:80>\n"
"\t    ServerName gitserver\n"
"\t    DocumentRoot /var/www/gitweb\n"
"\t    <Directory /var/www/gitweb>\n"
"\t        Options ExecCGI +FollowSymLinks +SymLinksIfOwnerMatch\n"
"\t        AllowOverride All\n"
"\t        order allow,deny\n"
"\t        Allow from all\n"
"\t        AddHandler cgi-script cgi\n"
"\t        DirectoryIndex gitweb.cgi\n"
"\t    </Directory>\n"
"\t</VirtualHost>"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:357
msgid ""
"Again, GitWeb can be served with any CGI capable web server; if you prefer "
"to use something else, it shouldn’t be difficult to set up. At this point, "
"you should be able to visit `http://gitserver/` to view your repositories "
"online, and you can use `http://git.gitserver` to clone and fetch your "
"repositories over HTTP."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:359
msgid "## Gitosis ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:361
msgid ""
"Keeping all users’ public keys in the `authorized_keys` file for access "
"works well only for a while. When you have hundreds of users, it’s much more "
"of a pain to manage that process. You have to shell onto the server each "
"time, and there is no access control — everyone in the file has read and "
"write access to every project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:363
msgid ""
"At this point, you may want to turn to a widely used software project called "
"Gitosis. Gitosis is basically a set of scripts that help you manage the "
"`authorized_keys` file as well as implement some simple access controls. The "
"really interesting part is that the UI for this tool for adding people and "
"determining access isn’t a web interface but a special Git repository. You "
"set up the information in that project; and when you push it, Gitosis "
"reconfigures the server based on that, which is cool."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:365
msgid ""
"Installing Gitosis isn’t the simplest task ever, but it’s not too difficult. "
"It’s easiest to use a Linux server for it — these examples use a stock "
"Ubuntu 8.10 server."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:367
msgid ""
"Gitosis requires some Python tools, so first you have to install the Python "
"setuptools package, which Ubuntu provides as python-setuptools:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:369
msgid "\t$ apt-get install python-setuptools"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:371
msgid "Next, you clone and install Gitosis from the project’s main site:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:373
msgid ""
"\t$ git clone git://eagain.net/gitosis.git\n"
"\t$ cd gitosis\n"
"\t$ sudo python setup.py install"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:377
msgid ""
"That installs a couple of executables that Gitosis will use. Next, Gitosis "
"wants to put its repositories under `/home/git`, which is fine. But you have "
"already set up your repositories in `/opt/git`, so instead of reconfiguring "
"everything, you create a symlink:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:379
msgid "\t$ ln -s /opt/git /home/git/repositories"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:381
msgid ""
"Gitosis is going to manage your keys for you, so you need to remove the "
"current file, re-add the keys later, and let Gitosis control the "
"`authorized_keys` file automatically. For now, move the `authorized_keys` "
"file out of the way:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:383
msgid "\t$ mv /home/git/.ssh/authorized_keys /home/git/.ssh/ak.bak"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:385
msgid ""
"Next you need to turn your shell back on for the 'git' user, if you changed "
"it to the `git-shell` command. People still won’t be able to log in, but "
"Gitosis will control that for you. So, let’s change this line in your "
"`/etc/passwd` file"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:387
msgctxt "en/04-git-server/01-chapter4.markdown:387"
msgid "\tgit:x:1000:1000::/home/git:/usr/bin/git-shell"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:389
msgid "back to this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:391
msgctxt "en/04-git-server/01-chapter4.markdown:391"
msgid "\tgit:x:1000:1000::/home/git:/bin/sh"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:393
msgid ""
"Now it’s time to initialize Gitosis. You do this by running the `gitosis-"
"init` command with your personal public key. If your public key isn’t on the "
"server, you’ll have to copy it there:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:395
msgid ""
"\t$ sudo -H -u git gitosis-init < /tmp/id_dsa.pub\n"
"\tInitialized empty Git repository in /opt/git/gitosis-admin.git/\n"
"\tReinitialized existing Git repository in /opt/git/gitosis-admin.git/"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:399
msgid ""
"This lets the user with that key modify the main Git repository that "
"controls the Gitosis setup. Next, you have to manually set the execute bit "
"on the `post-update` script for your new control repository."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:401
msgid "\t$ sudo chmod 755 /opt/git/gitosis-admin.git/hooks/post-update"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:403
msgid ""
"You’re ready to roll. If you’re set up correctly, you can try to SSH into "
"your server as the user for which you added the public key to initialize "
"Gitosis. You should see something like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:405
msgid ""
"\t$ ssh git@gitserver\n"
"\tPTY allocation request failed on channel 0\n"
"\tfatal: unrecognized command 'gitosis-serve schacon@quaternion'\n"
"\t  Connection to gitserver closed."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:410
msgid ""
"That means Gitosis recognized you but shut you out because you’re not trying "
"to do any Git commands. So, let’s do an actual Git command — you’ll clone "
"the Gitosis control repository:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:412
msgid ""
"\t# on your local computer\n"
"\t$ git clone git@gitserver:gitosis-admin.git"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:415
msgid ""
"Now you have a directory named `gitosis-admin`, which has two major parts:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:417
msgid ""
"\t$ cd gitosis-admin\n"
"\t$ find .\n"
"\t./gitosis.conf\n"
"\t./keydir\n"
"\t./keydir/scott.pub"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:423
msgid ""
"The `gitosis.conf` file is the control file you use to specify users, "
"repositories, and permissions. The `keydir` directory is where you store the "
"public keys of all the users who have any sort of access to your "
"repositories — one file per user. The name of the file in `keydir` (in the "
"previous example, `scott.pub`) will be different for you — Gitosis takes "
"that name from the description at the end of the public key that was "
"imported with the `gitosis-init` script."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:425
msgid ""
"If you look at the `gitosis.conf` file, it should only specify information "
"about the `gitosis-admin` project that you just cloned:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:427
msgid ""
"\t$ cat gitosis.conf\n"
"\t[gitosis]"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:430
msgid ""
"\t[group gitosis-admin]\n"
"\twritable = gitosis-admin\n"
"\tmembers = scott"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:434
msgid ""
"It shows you that the 'scott' user — the user with whose public key you "
"initialized Gitosis — is the only one who has access to the `gitosis-admin` "
"project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:436
msgid ""
"Now, let’s add a new project for you. You’ll add a new section called "
"`mobile` where you’ll list the developers on your mobile team and projects "
"that those developers need access to. Because 'scott' is the only user in "
"the system right now, you’ll add him as the only member, and you’ll create a "
"new project called `iphone_project` to start on:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:438
msgid ""
"\t[group mobile]\n"
"\twritable = iphone_project\n"
"\tmembers = scott"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:442
msgid ""
"Whenever you make changes to the `gitosis-admin` project, you have to commit "
"the changes and push them back up to the server in order for them to take "
"effect:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:444
msgid ""
"\t$ git commit -am 'add iphone_project and mobile group'\n"
"\t[master]: created 8962da8: \"changed name\"\n"
"\t 1 files changed, 4 insertions(+), 0 deletions(-)\n"
"\t$ git push\n"
"\tCounting objects: 5, done.\n"
"\tCompressing objects: 100% (2/2), done.\n"
"\tWriting objects: 100% (3/3), 272 bytes, done.\n"
"\tTotal 3 (delta 1), reused 0 (delta 0)\n"
"\tTo git@gitserver:/opt/git/gitosis-admin.git\n"
"\t   fb27aec..8962da8  master -> master"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:455
msgid ""
"You can make your first push to the new `iphone_project` project by adding "
"your server as a remote to your local version of the project and pushing. "
"You no longer have to manually create a bare repository for new projects on "
"the server — Gitosis creates them automatically when it sees the first push:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:457
msgid ""
"\t$ git remote add origin git@gitserver:iphone_project.git\n"
"\t$ git push origin master\n"
"\tInitialized empty Git repository in /opt/git/iphone_project.git/\n"
"\tCounting objects: 3, done.\n"
"\tWriting objects: 100% (3/3), 230 bytes, done.\n"
"\tTotal 3 (delta 0), reused 0 (delta 0)\n"
"\tTo git@gitserver:iphone_project.git\n"
"\t * [new branch]      master -> master"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:466
msgid ""
"Notice that you don’t need to specify the path (in fact, doing so won’t "
"work), just a colon and then the name of the project — Gitosis finds it for "
"you."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:468
msgid ""
"You want to work on this project with your friends, so you’ll have to re-add "
"their public keys. But instead of appending them manually to the "
"`~/.ssh/authorized_keys` file on your server, you’ll add them, one key per "
"file, into the `keydir` directory. How you name the keys determines how you "
"refer to the users in the `gitosis.conf` file. Let’s re-add the public keys "
"for John, Josie, and Jessica:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:470
msgid ""
"\t$ cp /tmp/id_rsa.john.pub keydir/john.pub\n"
"\t$ cp /tmp/id_rsa.josie.pub keydir/josie.pub\n"
"\t$ cp /tmp/id_rsa.jessica.pub keydir/jessica.pub"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:474
msgid ""
"Now you can add them all to your 'mobile' team so they have read and write "
"access to `iphone_project`:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:476
msgid ""
"\t[group mobile]\n"
"\twritable = iphone_project\n"
"\tmembers = scott john josie jessica"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:480
msgid ""
"After you commit and push that change, all four users will be able to read "
"from and write to that project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:482
msgid ""
"Gitosis has simple access controls as well. If you want John to have only "
"read access to this project, you can do this instead:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:484
msgid ""
"\t[group mobile]\n"
"\twritable = iphone_project\n"
"\tmembers = scott josie jessica"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:488
msgid ""
"\t[group mobile_ro]\n"
"\treadonly = iphone_project\n"
"\tmembers = john"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:492
msgid ""
"Now John can clone the project and get updates, but Gitosis won’t allow him "
"to push back up to the project. You can create as many of these groups as "
"you want, each containing different users and projects. You can also specify "
"another group as one of the members (using `@` as prefix), to inherit all "
"of its members automatically:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:494
msgid ""
"\t[group mobile_committers]\n"
"\tmembers = scott josie jessica"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:497
msgid ""
"\t[group mobile]\n"
"\twritable  = iphone_project\n"
"\tmembers   = @mobile_committers"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:501
msgid ""
"\t[group mobile_2]\n"
"\twritable  = another_iphone_project\n"
"\tmembers   = @mobile_committers john"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:505
msgid ""
"If you have any issues, it may be useful to add `loglevel=DEBUG` under the "
"`[gitosis]` section. If you’ve lost push access by pushing a messed-up "
"configuration, you can manually fix the file on the server under "
"`/home/git/.gitosis.conf` — the file from which Gitosis reads its info. A "
"push to the project takes the `gitosis.conf` file you just pushed up and "
"sticks it there. If you edit that file manually, it remains like that until "
"the next successful push to the `gitosis-admin` project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:507
msgid "## Gitolite ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:509
msgid ""
"This section serves as a quick introduction to gitolite, and provides basic "
"installation and setup instructions.  It cannot, however, replace the "
"enormous amount of [documentation][gltoc] that gitolite comes with.  There "
"may also be occasional changes to this section itself, so you may also want "
"to look at the latest version [here][gldpg]."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:511
msgid ""
"[gldpg]: http://sitaramc.github.com/gitolite/progit.html\n"
"[gltoc]: http://sitaramc.github.com/gitolite/master-toc.html"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:514
msgid ""
"Gitolite is an authorisation layer on top of git, relying on sshd or httpd "
"for authentication.  (Recap: authentication is identifying who the user is, "
"authorisation is deciding if he is allowed to do what he is attempting to)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:516
msgid ""
"Gitolite allows you to specify permissions not just by repository, but also "
"by branch or tag names within each repository.  That is, you can specify "
"that certain people (or groups of people) can only push certain \"refs\" "
"(branches or tags) but not others."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:518
msgid "### Installing ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:520
msgid ""
"Installing Gitolite is very easy, even if you don’t read the extensive "
"documentation that comes with it.  You need an account on a Unix server of "
"some kind.  You do not need root access, assuming git, perl, and an openssh "
"compatible ssh server are already installed.  In the examples below, we will "
"use the `git` account on a host called `gitserver`."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:522
msgid ""
"Gitolite is somewhat unusual as far as \"server\" software goes -- access is "
"via ssh, and so every userid on the server is a potential \"gitolite host\".  "
"We will describe the simplest install method in this article; for the other "
"methods please see the documentation."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:524
msgid ""
"To begin, create a user called `git` on your server and login to this user. "
" Copy your ssh pubkey (a file called `~/.ssh/id_rsa.pub` if you did a plain "
"`ssh-keygen` with all the defaults) from your workstation, renaming it to "
"`YourName.pub`.  Then run these commands:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:526
msgid ""
"    git clone git://github.com/sitaramc/gitolite\n"
"    gitolite/install -ln\n"
"        # assumes $HOME/bin exists and is in your $PATH\n"
"    gitolite setup -pk $HOME/YourName.pub\n"
"        # for example, I would run 'gitolite setup -pk $HOME/sitaram.pub'"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:532
msgid ""
"Finally, back on your workstation, run `git clone git@server:gitolite-"
"admin`."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:534
msgid ""
"And you’re done!  Gitolite has now been installed on the server, and you now "
"have a brand new repository called `gitolite-admin` in your workstation.  "
"You administer your gitolite setup by making changes to this repository and "
"pushing."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:536
msgid "### Customising the Install ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:538
msgid ""
"While the default, quick, install works for most people, there are some ways "
"to customise the install if you need to.  Some changes can be made simply "
"by editing the rc file, but if that is not sufficient, there’s documentation "
"on customising Gitolite."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:540
msgid "### Config File and Access Control Rules ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:542
msgid ""
"Once the install is done, you switch to the `gitolite-admin` clone you just "
"made on your workstation, and poke around to see what you got:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:544
msgid ""
"\t$ cd ~/gitolite-admin/\n"
"\t$ ls\n"
"\tconf/  keydir/\n"
"\t$ find conf keydir -type f\n"
"\tconf/gitolite.conf\n"
"\tkeydir/sitaram.pub\n"
"\t$ cat conf/gitolite.conf"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:552
msgid ""
"\trepo gitolite-admin\n"
"\t    RW+                 = sitaram"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:555
msgid ""
"\trepo testing\n"
"\t    RW+                 = @all"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:558
msgid ""
"Notice that \"sitaram\" (the name of the pubkey in the gl-setup command you "
"used earlier) has read-write permissions on the `gitolite-admin` repository "
"as well as a public key file of the same name."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:560
msgid ""
"Adding users is easy.  To add a user called \"alice\", obtain her public key, "
"name it \"alice.pub\", and put it in the \"keydir\" directory of the clone of "
"the gitolite-admin repo you just made on your workstation.  Add, commit, and "
"push the change, and the user has been added."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:562
msgid ""
"The config file syntax for gitolite is well documented, so we’ll only "
"mention some highlights here."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:564
msgid ""
"You can group users or repos for convenience.  The group names are just like "
"macros; when defining them, it doesn’t even matter whether they are "
"projects or users; that distinction is only made when you *use* the \"macro\"."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:566
msgid ""
"\t@oss_repos      = linux perl rakudo git gitolite\n"
"\t@secret_repos   = fenestra pear"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:569
msgid ""
"\t@admins         = scott     # Adams, not Chacon, sorry :)\n"
"\t@interns        = ashok     # get the spelling right, Scott!\n"
"\t@engineers      = sitaram dilbert wally alice\n"
"\t@staff          = @admins @engineers @interns"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:574
msgid ""
"You can control permissions at the \"ref\" level.  In the following example, "
"interns can only push the \"int\" branch.  Engineers can push any branch whose "
"name starts with \"eng-\", and tags that start with \"rc\" followed by a digit. "
" And the admins can do anything (including rewind) to any ref."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:576
msgid ""
"\trepo @oss_repos\n"
"\t    RW  int$                = @interns\n"
"\t    RW  eng-                = @engineers\n"
"\t    RW  refs/tags/rc[0-9]   = @engineers\n"
"\t    RW+                     = @admins"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:582
msgid ""
"The expression after the `RW` or `RW+` is a regular expression (regex) that "
"the refname (ref) being pushed is matched against.  So we call it a \"refex\"! "
" Of course, a refex can be far more powerful than shown here, so don’t "
"overdo it if you’re not comfortable with Perl regexes."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:584
msgid ""
"Also, as you probably guessed, Gitolite prefixes `refs/heads/` as a "
"syntactic convenience if the refex does not begin with `refs/`."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:586
msgid ""
"An important feature of the config file’s syntax is that all the rules for a "
"repository need not be in one place.  You can keep all the common stuff "
"together, like the rules for all `oss_repos` shown above, then add specific "
"rules for specific cases later on, like so:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:588
msgid ""
"\trepo gitolite\n"
"\t    RW+                     = sitaram"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:591
msgid ""
"That rule will just get added to the ruleset for the `gitolite` repository."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:593
msgid ""
"At this point you might be wondering how the access control rules are "
"actually applied, so let’s go over that briefly."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:595
msgid ""
"There are two levels of access control in Gitolite.  The first is at the "
"repository level; if you have read (or write) access to *any* ref in the "
"repository, then you have read (or write) access to the repository.  This is "
"the only access control that Gitosis had."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:597
msgid ""
"The second level, applicable only to \"write\" access, is by branch or tag "
"within a repository.  The username, the access being attempted (`W` or `+`), "
"and the refname being updated are known.  The access rules are checked in "
"order of appearance in the config file, looking for a match for this "
"combination (but remember that the refname is regex-matched, not merely "
"string-matched).  If a match is found, the push succeeds.  A fallthrough "
"results in access being denied."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:599
msgid "### Advanced Access Control with \"deny\" rules ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:601
msgid ""
"So far, we’ve only seen permissions to be one of `R`, `RW`, or `RW+`.  "
"However, Gitolite allows another permission: `-`, standing for \"deny\".  This "
"gives you a lot more power, at the expense of some complexity, because now "
"fallthrough is not the *only* way for access to be denied, so the *order of "
"the rules now matters*!"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:603
msgid ""
"Let us say, in the situation above, we want engineers to be able to rewind "
"any branch *except* master and integ.  Here’s how to do that:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:605
msgid ""
"\t    RW  master integ    = @engineers\n"
"\t    -   master integ    = @engineers\n"
"\t    RW+                 = @engineers"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:609
msgid ""
"Again, you simply follow the rules top down until you hit a match for your "
"access mode, or a deny.  Non-rewind push to master or integ is allowed by "
"the first rule.  A rewind push to those refs does not match the first rule, "
"drops down to the second, and is therefore denied.  Any push (rewind or non-"
"rewind) to refs other than master or integ won’t match the first two rules "
"anyway, and the third rule allows it."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:611
msgid "### Restricting pushes by files changed ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:613
msgid ""
"In addition to restricting what branches a user can push changes to, you can "
"also restrict what files they are allowed to touch.  For example, perhaps "
"the Makefile (or some other program) is really not supposed to be changed by "
"just anyone, because a lot of things depend on it or would break if the "
"changes are not done *just right*.  You can tell gitolite:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:615
msgid ""
"    repo foo\n"
"        RW                      =   @junior_devs @senior_devs"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:618
msgid "        -   VREF/NAME/Makefile  =   @junior_devs"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:620
msgid ""
"User who are migrating from the older gitolite should note that there is a "
"significant change in behaviour with regard to this feature; please see the "
"migration guide for details."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:622
msgid "### Personal Branches ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:624
msgid ""
"Gitolite also has a feature called \"personal branches\" (or rather, \"personal "
"branch namespace\") that can be very useful in a corporate environment."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:626
msgid ""
"A lot of code exchange in the git world happens by \"please pull\" requests.  "
"In a corporate environment, however, unauthenticated access is a no-no, and "
"a developer workstation cannot do authentication, so you have to push to the "
"central server and ask someone to pull from there."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:628
msgid ""
"This would normally cause the same branch name clutter as in a centralised "
"VCS, plus setting up permissions for this becomes a chore for the admin."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:630
msgid ""
"Gitolite lets you define a \"personal\" or \"scratch\" namespace prefix for each "
"developer (for example, `refs/personal/<devname>/*`); please see the "
"documentation for details."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:632
msgid "### \"Wildcard\" repositories ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:634
msgid ""
"Gitolite allows you to specify repositories with wildcards (actually perl "
"regexes), like, for example `assignments/s[0-9][0-9]/a[0-9][0-9]`, to pick a "
"random example.  It also allows you to assign a new permission mode (\"C\") "
"which enables users to create repositories based on such wild cards, "
"automatically assigns ownership to the specific user who created it, allows "
"him/her to hand out R and RW permissions to other users to collaborate, etc. "
" Again, please see the documentation for details."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:636
msgid "### Other Features ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:638
msgid ""
"We’ll round off this discussion with a sampling of other features, all of "
"which, and many more, are described in great detail in the documentation."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:640
msgid ""
"**Logging**: Gitolite logs all successful accesses.  If you were somewhat "
"relaxed about giving people rewind permissions (`RW+`) and some kid blew "
"away \"master\", the log file is a life saver, in terms of easily and quickly "
"finding the SHA that got hosed."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:642
msgid ""
"**Access rights reporting**: Another convenient feature is what happens when "
"you try and just ssh to the server.  Gitolite shows you what repos you have "
"access to, and what that access may be.  Here’s an example:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:644
msgid ""
"        hello sitaram, this is git@git running gitolite3 v3.01-18-g9609868 "
"on git 1.7.4.4"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:646
msgid ""
"             R     anu-wsd\n"
"             R     entrans\n"
"             R  W  git-notes\n"
"             R  W  gitolite\n"
"             R  W  gitolite-admin\n"
"             R     indic_web_input\n"
"             R     shreelipi_converter"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:654
msgid ""
"**Delegation**: For really large installations, you can delegate "
"responsibility for groups of repositories to various people and have them "
"manage those pieces independently.  This reduces the load on the main admin, "
"and makes him less of a bottleneck."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:656
msgid ""
"**Mirroring**: Gitolite can help you maintain multiple mirrors, and switch "
"between them easily if the primary server goes down."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:658
msgid "## Git Daemon ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:660
msgid ""
"For public, unauthenticated read access to your projects, you’ll want to "
"move past the HTTP protocol and start using the Git protocol. The main "
"reason is speed. The Git protocol is far more efficient and thus faster than "
"the HTTP protocol, so using it will save your users time."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:662
msgid ""
"Again, this is for unauthenticated read-only access. If you’re running this "
"on a server outside your firewall, it should only be used for projects that "
"are publicly visible to the world. If the server you’re running it on is "
"inside your firewall, you might use it for projects that a large number of "
"people or computers (continuous integration or build servers) have read-only "
"access to, when you don’t want to have to add an SSH key for each."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:664
msgid ""
"In any case, the Git protocol is relatively easy to set up. Basically, you "
"need to run this command in a daemonized manner:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:666
msgid "\tgit daemon --reuseaddr --base-path=/opt/git/ /opt/git/"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:668
msgid ""
"`--reuseaddr` allows the server to restart without waiting for old "
"connections to time out, the `--base-path` option allows people to clone "
"projects without specifying the entire path, and the path at the end tells "
"the Git daemon where to look for repositories to export. If you’re running a "
"firewall, you’ll also need to punch a hole in it at port 9418 on the box "
"you’re setting this up on."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:670
msgid ""
"You can daemonize this process a number of ways, depending on the operating "
"system you’re running. On an Ubuntu machine, you use an Upstart script. So, "
"in the following file"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:672
msgid "\t/etc/event.d/local-git-daemon"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:674
msgid "you put this script:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:676
msgid ""
"\tstart on startup\n"
"\tstop on shutdown\n"
"\texec /usr/bin/git daemon \\\n"
"\t    --user=git --group=git \\\n"
"\t    --reuseaddr \\\n"
"\t    --base-path=/opt/git/ \\\n"
"\t    /opt/git/\n"
"\trespawn"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:685
msgid ""
"For security reasons, it is strongly encouraged to have this daemon run as a "
"user with read-only permissions to the repositories — you can easily do "
"this by creating a new user 'git-ro' and running the daemon as them.  For "
"the sake of simplicity we’ll simply run it as the same 'git' user that "
"Gitosis is running as."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:687
msgid ""
"When you restart your machine, your Git daemon will start automatically and "
"respawn if it goes down. To get it running without having to reboot, you can "
"run this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:689
msgid "\tinitctl start local-git-daemon"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:691
msgid ""
"On other systems, you may want to use `xinetd`, a script in your `sysvinit` "
"system, or something else — as long as you get that command daemonized and "
"watched somehow."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:693
msgid ""
"Next, you have to tell your Gitosis server which repositories to allow "
"unauthenticated Git server-based access to. If you add a section for each "
"repository, you can specify the ones from which you want your Git daemon to "
"allow reading. If you want to allow Git protocol access for the "
"`iphone_project`, you add this to the end of the `gitosis.conf` file:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:695
msgid ""
"\t[repo iphone_project]\n"
"\tdaemon = yes"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:698
msgid ""
"When that is committed and pushed up, your running daemon should start "
"serving requests for the project to anyone who has access to port 9418 on "
"your server."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:700
msgid ""
"If you decide not to use Gitosis, but you want to set up a Git daemon, "
"you’ll have to run this on each project you want the Git daemon to serve:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:702
msgid ""
"\t$ cd /path/to/project.git\n"
"\t$ touch git-daemon-export-ok"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:705
msgid ""
"The presence of that file tells Git that it’s OK to serve this project "
"without authentication."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:707
msgid ""
"Gitosis can also control which projects GitWeb shows. First, you need to add "
"something like the following to the `/etc/gitweb.conf` file:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:709
msgid ""
"\t$projects_list = \"/home/git/gitosis/projects.list\";\n"
"\t$projectroot = \"/home/git/repositories\";\n"
"\t$export_ok = \"git-daemon-export-ok\";\n"
"\t@git_base_url_list = ('git://gitserver');"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:714
msgid ""
"You can control which projects GitWeb lets users browse by adding or "
"removing a `gitweb` setting in the Gitosis configuration file. For instance, "
"if you want the `iphone_project` to show up on GitWeb, you make the `repo` "
"setting look like this:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:716
msgid ""
"\t[repo iphone_project]\n"
"\tdaemon = yes\n"
"\tgitweb = yes"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:720
msgid ""
"Now, if you commit and push the project, GitWeb will automatically start "
"showing the `iphone_project`."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:722
msgid "## Hosted Git ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:724
msgid ""
"If you don’t want to go through all of the work involved in setting up your "
"own Git server, you have several options for hosting your Git projects on an "
"external dedicated hosting site. Doing so offers a number of advantages: a "
"hosting site is generally quick to set up and easy to start projects on, and "
"no server maintenance or monitoring is involved. Even if you set up and run "
"your own server internally, you may still want to use a public hosting site "
"for your open source code — it’s generally easier for the open source "
"community to find and help you with."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:726
msgid ""
"These days, you have a huge number of hosting options to choose from, each "
"with different advantages and disadvantages. To see an up-to-date list, "
"check out the following page:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:728
msgid "\thttp://en.wikipedia.org/wiki/Git_(software)#Source_code_hosting"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:730
msgid ""
"Because we can’t cover all of them, and because I happen to work at one of "
"them, we’ll use this section to walk through setting up an account and "
"creating a new project at GitHub. This will give you an idea of what is "
"involved."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:732
msgid ""
"GitHub is by far the largest open source Git hosting site and it’s also one "
"of the very few that offers both public and private hosting options so you "
"can keep your open source and private commercial code in the same place. In "
"fact, we used GitHub to privately collaborate on this book."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:734
msgid "### GitHub ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:736
msgid ""
"GitHub is slightly different than most code-hosting sites in the way that it "
"namespaces projects. Instead of being primarily based on the project, "
"GitHub is user centric. That means when I host my `grit` project on GitHub, "
"you won’t find it at `github.com/grit` but instead at "
"`github.com/schacon/grit`. There is no canonical version of any project, "
"which allows a project to move from one user to another seamlessly if the "
"first author abandons the project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:738
msgid ""
"GitHub is also a commercial company that charges for accounts that maintain "
"private repositories, but anyone can quickly get a free account to host as "
"many open source projects as they want. We’ll quickly go over how that is "
"done."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:740
msgid "### Setting Up a User Account ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:742
msgid ""
"The first thing you need to do is set up a free user account. If you visit "
"the Pricing and Signup page at `http://github.com/plans` and click the \"Sign "
"Up\" button on the Free account (see Figure 4-2), you’re taken to the signup "
"page."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:744
msgid ""
"Insert 18333fig0402.png\n"
"Figure 4-2. The GitHub plan page."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:747
msgid ""
"Here you must choose a username that isn’t yet taken in the system and enter "
"an e-mail address that will be associated with the account and a password "
"(see Figure 4-3)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:749
msgid ""
"Insert 18333fig0403.png\n"
"Figure 4-3. The GitHub user signup form."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:752
msgid ""
"If you have it available, this is a good time to add your public SSH key as "
"well. We covered how to generate a new key earlier, in the \"Simple Setups\" "
"section. Take the contents of the public key of that pair, and paste it into "
"the SSH Public Key text box. Clicking the \"explain ssh keys\" link takes you "
"to detailed instructions on how to do so on all major operating systems.\n"
"Clicking the \"I agree, sign me up\" button takes you to your new user "
"dashboard (see Figure 4-4)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:755
msgid ""
"Insert 18333fig0404.png\n"
"Figure 4-4. The GitHub user dashboard."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:758
msgid "Next you can create a new repository."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:760
msgid "### Creating a New Repository ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:762
msgid ""
"Start by clicking the \"create a new one\" link next to Your Repositories on "
"the user dashboard. You’re taken to the Create a New Repository form (see "
"Figure 4-5)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:764
msgid ""
"Insert 18333fig0405.png\n"
"Figure 4-5. Creating a new repository on GitHub."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:767
msgid ""
"All you really have to do is provide a project name, but you can also add a "
"description. When that is done, click the \"Create Repository\" button. Now "
"you have a new repository on GitHub (see Figure 4-6)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:769
msgid ""
"Insert 18333fig0406.png\n"
"Figure 4-6. GitHub project header information."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:772
msgid ""
"Since you have no code there yet, GitHub will show you instructions for how "
"create a brand-new project, push an existing Git project up, or import a "
"project from a public Subversion repository (see Figure 4-7)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:774
msgid ""
"Insert 18333fig0407.png\n"
"Figure 4-7. Instructions for a new repository."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:777
msgid ""
"These instructions are similar to what we’ve already gone over. To "
"initialize a project if it isn’t already a Git project, you use"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:779
msgid ""
"\t$ git init\n"
"\t$ git add .\n"
"\t$ git commit -m 'initial commit'"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:783
msgid ""
"When you have a Git repository locally, add GitHub as a remote and push up "
"your master branch:"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:785
msgid ""
"\t$ git remote add origin git@github.com:testinguser/iphone_project.git\n"
"\t$ git push origin master"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:788
msgid ""
"Now your project is hosted on GitHub, and you can give the URL to anyone you "
"want to share your project with. In this case, it’s "
"`http://github.com/testinguser/iphone_project`. You can also see from the "
"header on each of your project’s pages that you have two Git URLs (see "
"Figure 4-8)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:790
msgid ""
"Insert 18333fig0408.png\n"
"Figure 4-8. Project header with a public URL and a private URL."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:793
msgid ""
"The Public Clone URL is a public, read-only Git URL over which anyone can "
"clone the project. Feel free to give out that URL and post it on your web "
"site or what have you."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:795
msgid ""
"The Your Clone URL is a read/write SSH-based URL that you can read or write "
"over only if you connect with the SSH private key associated with the public "
"key you uploaded for your user. When other users visit this project page, "
"they won’t see that URL—only the public one."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:797
msgid "### Importing from Subversion ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:799
msgid ""
"If you have an existing public Subversion project that you want to import "
"into Git, GitHub can often do that for you. At the bottom of the "
"instructions page is a link to a Subversion import. If you click it, you see "
"a form with information about the import process and a text box where you "
"can paste in the URL of your public Subversion project (see Figure 4-9)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:801
msgid ""
"Insert 18333fig0409.png\n"
"Figure 4-9. Subversion importing interface."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:804
msgid ""
"If your project is very large, nonstandard, or private, this process "
"probably won’t work for you. In Chapter 7, you’ll learn how to do more "
"complicated manual project imports."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:806
msgid "### Adding Collaborators ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:808
msgid ""
"Let’s add the rest of the team. If John, Josie, and Jessica all sign up for "
"accounts on GitHub, and you want to give them push access to your "
"repository, you can add them to your project as collaborators. Doing so will "
"allow pushes from their public keys to work."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:810
msgid ""
"Click the \"edit\" button in the project header or the Admin tab at the top of "
"the project to reach the Admin page of your GitHub project (see Figure "
"4-10)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:812
msgid ""
"Insert 18333fig0410.png\n"
"Figure 4-10. GitHub administration page."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:815
msgid ""
"To give another user write access to your project, click the “Add another "
"collaborator” link. A new text box appears, into which you can type a "
"username. As you type, a helper pops up, showing you possible username "
"matches. When you find the correct user, click the Add button to add that "
"user as a collaborator on your project (see Figure 4-11)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:817
msgid ""
"Insert 18333fig0411.png\n"
"Figure 4-11. Adding a collaborator to your project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:820
msgid ""
"When you’re finished adding collaborators, you should see a list of them in "
"the Repository Collaborators box (see Figure 4-12)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:822
msgid ""
"Insert 18333fig0412.png\n"
"Figure 4-12. A list of collaborators on your project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:825
msgid ""
"If you need to revoke access to individuals, you can click the \"revoke\" "
"link, and their push access will be removed. For future projects, you can "
"also copy collaborator groups by copying the permissions of an existing "
"project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:827
msgid "### Your Project ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:829
msgid ""
"After you push your project up or have it imported from Subversion, you have "
"a main project page that looks something like Figure 4-13."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:831
msgid ""
"Insert 18333fig0413.png\n"
"Figure 4-13. A GitHub main project page."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:834
msgid ""
"When people visit your project, they see this page. It contains tabs to "
"different aspects of your projects. The Commits tab shows a list of commits "
"in reverse chronological order, similar to the output of the `git log` "
"command. The Network tab shows all the people who have forked your project "
"and contributed back. The Downloads tab allows you to upload project "
"binaries and link to tarballs and zipped versions of any tagged points in "
"your project. The Wiki tab provides a wiki where you can write documentation "
"or other information about your project. The Graphs tab has some "
"contribution visualizations and statistics about your project. The main "
"Source tab that you land on shows your project’s main directory listing and "
"automatically renders the README file below it if you have one. This tab "
"also shows a box with the latest commit information."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:836
msgid "### Forking Projects ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:838
msgid ""
"If you want to contribute to an existing project to which you don’t have "
"push access, GitHub encourages forking the project. When you land on a "
"project page that looks interesting and you want to hack on it a bit, you "
"can click the \"fork\" button in the project header to have GitHub copy that "
"project to your user so you can push to it."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:840
msgid ""
"This way, projects don’t have to worry about adding users as collaborators "
"to give them push access. People can fork a project and push to it, and the "
"main project maintainer can pull in those changes by adding them as remotes "
"and merging in their work."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:842
msgid ""
"To fork a project, visit the project page (in this case, mojombo/chronic) "
"and click the \"fork\" button in the header (see Figure 4-14)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:844
msgid ""
"Insert 18333fig0414.png\n"
"Figure 4-14. Get a writable copy of any repository by clicking the \"fork\" "
"button."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:847
msgid ""
"After a few seconds, you’re taken to your new project page, which indicates "
"that this project is a fork of another one (see Figure 4-15)."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:849
msgid ""
"Insert 18333fig0415.png\n"
"Figure 4-15. Your fork of a project."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:852
msgid "### GitHub Summary ###"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:854
msgid ""
"That’s all we’ll cover about GitHub, but it’s important to note how quickly "
"you can do all this. You can create an account, add a new project, and push "
"to it in a matter of minutes. If your project is open source, you also get a "
"huge community of developers who now have visibility into your project and "
"may well fork it and help contribute to it. At the very least, this may be a "
"way to get up and running with Git and try it out quickly."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:856
msgid "## Summary ##"
msgstr ""

#: en/04-git-server/01-chapter4.markdown:858
msgid ""
"You have several options to get a remote Git repository up and running so "
"that you can collaborate with others or share your work."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:860
msgid ""
"Running your own server gives you a lot of control and allows you to run the "
"server within your own firewall, but such a server generally requires a "
"fair amount of your time to set up and maintain. If you place your data on a "
"hosted server, it’s easy to set up and maintain; however, you have to be "
"able to keep your code on someone else’s servers, and some organizations "
"don’t allow that."
msgstr ""

#: en/04-git-server/01-chapter4.markdown:862
msgid ""
"It should be fairly straightforward to determine which solution or "
"combination of solutions is appropriate for you and your organization."
msgstr ""
